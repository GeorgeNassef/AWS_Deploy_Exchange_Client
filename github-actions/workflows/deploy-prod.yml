name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY_FRONTEND: exchange-crm-frontend
  ECR_REPOSITORY_BACKEND: exchange-crm-backend
  ECS_CLUSTER: exchange-crm-prod
  ECS_SERVICE_FRONTEND: frontend-service
  ECS_SERVICE_BACKEND: backend-service

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:latest
        build-args: |
          REACT_APP_API_URL=${{ secrets.API_URL }}
          REACT_APP_AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest
        build-args: |
          AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}

    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_SERVICE_FRONTEND }} \
          --query taskDefinition > frontend-task-definition.json
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_SERVICE_BACKEND }} \
          --query taskDefinition > backend-task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definitions
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: frontend-task-definition.json
        container-name: frontend
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}

    - name: Fill in the new image ID in the Amazon ECS task definitions
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: backend-task-definition.json
        container-name: backend
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}

    - name: Deploy Frontend Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_FRONTEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Deploy Backend Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_BACKEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Notify deployment status
      if: always()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        slack-message: |
          *Deployment Status*: ${{ job.status }}
          *Environment*: Production
          *Commit*: ${{ github.sha }}
          *Triggered By*: ${{ github.actor }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
